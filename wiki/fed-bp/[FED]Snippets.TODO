[SNIPPET - FED]
  /////////////////////////// [BEST-PRACTICES] ///////////////////////////
  Attributs selector :
    [attr=valeur] => input[name="value"]

    
  Color variable name  :
    $contexte-element-color;
    --- ✄ -----------------------
      ex : 
        $header-link-white;
    --- ✄ -----------------------


  /////////////////////////// [CSS] ///////////////////////////
  Import :
    (Fichier ds le mm rep. EX: "_filename")
    --- ✄ -----------------------
    @import 'filename'; /* => one MORE Http request call */
    --- ✄ -----------------------

  /////////////////////////// [SCSS] ///////////////////////////
  Import :
    Partials :
      File in "partials" directory => _filename
      --- ✄ -----------------------
      @import 'partials/filename'; /* => NO Http request call. It's just a partial */
      --- ✄ -----------------------
    Images :
      @import 'url/folder/*.png'; => /* SASS will make a sprite of all png in folder */
      @include all-folder-sprite; /*Generate all the classes names based on images in sprite*/
      --- ✄ -----------------------
      @import '../parent_directory/icons/*.png';

      @include all-icons-sprite;
      OR
      /*V1*/
      myClass {
        div.class { @include icons-sprite(image-name); /*Only generate the class of specified image*/ }
        div.class:hover { @include icons-sprite(image-name_on); }
      }

      /*V2*/
      myClass { 
        div.class { 
          @include icons-sprite(image-name); 
          height: icons-sprite-width(image-name); /*Get the real height of this icon(image-name)*/
          width: icons-sprite-width(image-name); /*Get the real width of this icon(image-name)*/
        } 
      }

  Definir variables :
   --- ✄ -----------------------
   $color-table : #ef4579; /* Couleurs */
   $fontsdirectory : "/common/fonts"; /* Paths */
   $minBreakPoint : 1300px; /* Breakpoints */
   --- ✄ -----------------------

  Mixins :
    /* ALL KIND OF MIXINS CAN BE FOUND ON WEB FOR FREE */

    @mixin translateX($val) { /* @mixin translateX($val) have no value by default. If i want set a default value, use : @mixin translateX($val: 10px) */
      -webkit-translateX: translateX($val);
      -moz-translateX: translateX($val);
      -ms-translateX: translateX($val);
      -o-translateX: translateX($val);
      translateX: translateX($val);
    }

    @mixin fontFace ($fontfamily, $fontweight,$basepath,$basenameNoExtension){
     @font-face {
       font-family: $fontfamily;
       font-style: normal;
       font-weight: $fontweight;
       src: url($basepath + "/" + $basenameNoExtension + ".eot");
       src: url($basepath + "/" + $basenameNoExtension + ".eot?#iefix") format("embedded-opentype"),
       url($basepath + "/" + $basenameNoExtension + ".woff") format("woff"),
       url($basepath + "/" + $basenameNoExtension + ".ttf") format("truetype"),
       url($basepath + "/" + $basenameNoExtension + ".svg") format("svg");
     }
   }
    --- ✄ -----------------------
   .myClass {
     @include fontFace('ALSSyysScript','normal',$fontsdirectory,'alssyysscript-webfont');
     @include transLateX(10px);
   }
   --- ✄ -----------------------

   // Media query mixin 
   @mixin max-screen($max) {

   }

  Extend class :
    @extend .[class-name]
    --- ✄ -----------------------
     ex :
       .one {color: #000; font-size: 14px;}
       .two {
         @extend .one;
         font-weight: bold;
       }
    --- ✄ -----------------------
  Functions :
    @function foo($param1, $param2) {}
    --- ✄ -----------------------
      ex :
        @function heightCalc($param1, $param2) {
          @return $element / $param1 - $element2 / $param2;
        }

        .myClass {
          height : heightCalc(5,8);
        }
  Each / Loop:

    --- ✄ -----------------------
    $myCollections : color1 #5aa8be #00758e, color2 #77c4bb #39928b, color3 #ffcb00 #e3a400;

    @each $myCollection in $myCollections {
      &.#{nth($myCollection, 1)} {
        color: nth($myCollection, 2);
        @media (min-width: $screen-sm-min) {
          background-color: nth($myCollection, 2);
          border-color: nth($myCollection, 2);
          color: #fff;
        }
      }
    }


  Spécifier une propriété selon un class/id d'un parent (cf: body) :
   --- ✄ -----------------------
   body.lang-fr & {} => & à la fin de la propriété
   --- ✄ -----------------------
    ex: 
    .banner_promotion {
      .pick_up_in_store { 
        body.lang-fr & {
          background: url("banner_promo/pick_up_in_store/ccl-hp-pick_up_in_store-free-fr.jpg") top leftno-repeat transparent;
        }
      }
    }
  --- ✄ -----------------------
  BEM syntax :
     .block {
        @at-root #{&}__element {
        }
        @at-root #{&}--modifier {
        }
      }

      *Author in a nested format, but get CSS that isn't nested, with @at-root.

  --- ✄ -----------------------
  SASS / COMPASS :
   Install (THIS IS FOr LINUX/OS X && IF SASS / COMPASS Is NOT ALREADY INSTALL) :
      1. Check if ruby is installed => ruby -v
     2. sudo gem install sass /*OR sudo gem install compass. COMPASS need SASS so it's also installed*/
     3. sass -v

   Install (THIS IS FOr LINUX/OS X && IF SASS / COMPASS Is ALREADY INSTALL) :
   V1 :
     1. create .scss file
     2. [in the [name].scss place] sass [name].scss [name].css
       => Sass will create [name].css and [name].css.map and watch ONLY ONE TIME
     2B. [in the [name].scss place] sass --watch [name].scss:[name].css
       => Sass will create [name].css and [name].css.map and watch/update CONSTENTLY
     2C. [in the parent directory of 'sass' folder] sass --watch [sass folder]:[css folder].css
       => Sass will watch/update CONSTENTLY and compile sass files in sass folder to css files in css folder

   V2 :
     Create a new compass project
       1. Move in the good repertory
       2. compass create project_folder_name OR SPECIFIQ compass create --sass-dir "sass" -css-dir "css" 
         => compass generate "sass" & "stylesheet" rep + "config.rb" file)
       3. Move in the project folder
       4. "ls -a" 
         => look in the folder and see all the contents, including hidden files
       5. "compass watch"
         => Start watching the project

   Activate css :
     1. Trouver le binome scss/css
     2. Modifier le fichiers .scss et non css
     3. verifier l'emplacement du fichier config.rb
    
     Dans un nouveau terminal
     1. Se placer dans le dossier contenant le rb
     2. configurer le fichier config.rb selon l'emplacement des éléments (css/images...)
     3. activer compass => "compass watch"
    
     (Si pas de config.rb)
     sass --sourcemap=none --watch sass:css
     sass -- watch sass:css
     
     CTRL+C = stopper "compass watch" (désactivation de compass)
  --- ✄ -----------------------


/////////////////////////// [RWD] ///////////////////////////
  Media query :
    @media only screen and () {}

  Calcul pourcentage elements:
   CIBLE ÷ CONTEXTE = RESULTAT x 100
   Calcul fonts em :
    1em = 100% (de la taille par défaut)
    CIBLE ÷ CONTEXTE = RESULTAT x 100 => 12 / 16 = 0.75em | 22 / 16 = 1.375em

  Background IMG :
   background: url("") no-repeat center center transparent;
   background-size: cover; /*contain*/

  


/////////////////////////// [JAVASCRIPT] ///////////////////////////
  BOWER :
    1. sudo npm install -g bower

  JS :
    check if element exists:
    --- ✄ -----------------------
      if ($('#element').length > 0) {
        // exists.
      }
    --- ✄ -----------------------
    check if the function exists before calling it to avoid the error:
      --- ✄ -----------------------
        if (typeof yourFunctionName == 'function') { 
          yourFunctionName(); 
        }
      --- ✄ -----------------------

    querySelectorAll + forEach (fix for IE & FF):
      --- ✄ -----------------------
      var elements = [].slice.call( document.querySelectorAll('selectors') ), // querySelector send a nodeList and forEach (for IE and FF) needs a array, so [].slice.call() put the querySelector nodeList in a array.
          elementsTwo = [].slice.call( document.querySelectorAll('.js-toogle-infos') );

      elements.forEach(function(element) {
        console.log(element);

        elementsTwo.forEach(function(elementTwo) {
           console.log(elementTwo);
        });
      }
      --- ✄ -----------------------

      cf: https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/, https://stackoverflow.com/questions/7056925/how-does-array-prototype-slice-call-work, https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/slice, https://coderwall.com/p/kvzbpa/don-t-use-array-foreach-use-for-instead

    For loop (& get ancestor/parent):
      --- ✄ -----------------------
      // Get ancestor function
      function getAncestor( elem, selector ) {
          for ( ; elem && elem !== document; elem = elem.parentNode ) {
              if ( elem.matches( selector ) ) return elem;
          }
      }

      var element = document.querySelectorAll(selectors);

      for (var i = 0; i < element.length; i++) {
          element[i].addEventListener('click', function() {
              // Get ancestor
              var ancestorElem = getAncestor(this, '.bl-info-item');
            
              // Matches children in ancestor
              var elementTwo = ancestorElem.querySelectorAll(selectors);

              for(var j = 0; j < elementTwo.length; j++) {
                  console.log(elementTwo);
              }
          });
      }
      --- ✄ -----------------------

      JSPerf : 
        https://jsperf.com/for-vs-foreach/37

/////////////////////////// [CODE SNIPPET] ///////////////////////////
  combinators :
    Adjacent sibling selectors :
      The '+' combinator selects nodes that immediately follow the former specified element.
      --- ✄ -----------------------
        Syntax: A + B
      --- ✄ -----------------------

    General sibling selectors :
      The '~' combinator selects nodes that follow (not necessarily immediately) the former specified element, if both elements shared the same parent.
      --- ✄ -----------------------
        Syntax: A ~ B
      --- ✄ -----------------------

    Child selectors :
      The '>' combinator selects nodes that are direct children of the former specified element.
      --- ✄ -----------------------
        Syntax: A > B
      --- ✄ -----------------------

    Descendant selectors :
      The ' ' combinator selects nodes that are children (not necessary direct children) of the former specified element.
      --- ✄ -----------------------
        Syntax: A B
      --- ✄ -----------------------

  pseudo class :
    .breadcrumbs__step:not(:first-child):not(:last-child) &

  pseudo elements :
    The CSS ::after pseudo-element matches a virtual last child of the selected element. It is typically used to add cosmetic content to an element by using the content CSS property. This element is inline by default.

    CSS2 syntax :
      element:after  { style properties }

   CSS3 syntax :
      element::after { style properties }

   *The ::after notation (with two colons) was introduced in CSS 3 in order to establish a discrimination between pseudo-classes and pseudo-elements. Browsers also accept the notation :after introduced in CSS 2.

   --- ✄ -----------------------
     element::after {
      content: "<- now this *is* exciting!"; 
      color: green;
    }
   --- ✄ -----------------------

   [Infobulle]
   --- ✄ -----------------------
     span[data-descr]:hover::after {
      content: attr(data-descr);
      position: absolute;
      left: 0;
      top: 24px;
      min-width: 200px;
      border: 1px #aaaaaa solid;
      border-radius: 10px;
      background-color: #ffffcc;
      padding: 12px;
      color: #000000;
      font-size: 14px;
      z-index: 1;
    }
   --- ✄ -----------------------

  Input field [form] custom :

  DIV auto size to content :
    display: inline-block;
    overflow: auto;

  Responsive image :
    background: url() no-repeat center center;
    background-size: cover;
    height: auto;
    max-width: 100%;
    width: 100%;

  ScrollTo [JS]:
    Scroll to target in page:
      ex:
      --- ✄ -----------------------
      function scrolltoTarget(blocTarget) {
          var inputTargetTop = blocTarget.offset().top;

          $('body,html').animate({
              scrollTop: inputTargetTop
          }, 800);
      }
      --- ✄ -----------------------

    Scroll to element in div:
      ex :
      --- ✄ -----------------------
      marker.addListener('click', function() {
        var currentContainer = $('class'),
        currentContainerTop = currentContainer.offset().top,
        inputTargetTop = $('class/id').offset().top;

        currentContainer.animate({
            scrollTop: currentContainer.scrollTop() - currentContainerTop + inputTargetTop
        }, 400);
      });
      --- ✄ -----------------------

      No plugin:
      --- ✄ -----------------------
      var container = $('div'),
      scrollTo = $('#row_8');

      container.scrollTop(
          scrollTo.offset().top - container.offset().top + container.scrollTop()
      );

      // Or you can animate the scrolling:
      container.animate({
          scrollTop: scrollTo.offset().top - container.offset().top + container.scrollTop()
      });​
      --- ✄ -----------------------

      jquery animate function:
      --- ✄ -----------------------
      jQuery.fn.scrollTo = function(elem, speed) { 
          $(this).animate({
              scrollTop:  $(this).scrollTop() - $(this).offset().top + $(elem).offset().top 
          }, speed == undefined ? 1000 : speed); 
          return this; 
      };
      --- ✄ -----------------------

      jquery no animate function:
      --- ✄ -----------------------
      jQuery.fn.scrollTo = function(elem) { 
          $(this).scrollTop($(this).scrollTop() - $(this).offset().top + $(elem).offset().top); 
          return this; 
      };

      $("#overflow_div").scrollTo("#innerItem");
      $("#overflow_div").scrollTo("#innerItem", 2000); //custom animation speed 
      --- ✄ -----------------------
    


